// This project is based on a tutorial from Awesome Tuts with some modifications of my own.
// I do not own the visual blueprints used as a starter content for the game.

#include "PacmanController.h"
#include "PacmanPawn.h"

// This function is adapted from the tutorial
// Return a pawn type to overload the function provided in the pawn class
APacmanPawn* APacmanController::GetPacmanPawn() const
{
	return Cast<APacmanPawn>(GetPawn());
}

// This function is generated by UE4
void APacmanController::SetupInputComponent() 
{
	Super::SetupInputComponent();
	// Action binding for the pawn movement from the tutorial
	InputComponent->BindAction("MoveUp", IE_Pressed, this, &APacmanController::MoveUp);
	InputComponent->BindAction("MoveDown", IE_Pressed, this, &APacmanController::MoveDown);
	InputComponent->BindAction("MoveLeft", IE_Pressed, this, &APacmanController::MoveLeft);
	InputComponent->BindAction("MoveRight", IE_Pressed, this, &APacmanController::MoveRight);
}

// Pawn movement from the tutorial
void APacmanController::MoveUp()
{
	if (GetPacmanPawn() != nullptr) 
	{
		GetPacmanPawn()->SetDirection(FVector::UpVector);
	}
}

// Pawn movement from the tutorial
void APacmanController::MoveDown()
{
	if (GetPacmanPawn() != nullptr)
	{
		GetPacmanPawn()->SetDirection(FVector::DownVector);
	}
}

// Pawn movement from the tutorial
void APacmanController::MoveLeft()
{
	if (GetPacmanPawn() != nullptr)
	{
		GetPacmanPawn()->SetDirection(FVector::LeftVector);
	}
}

// Pawn movement from the tutorial
void APacmanController::MoveRight()
{
	if (GetPacmanPawn() != nullptr)
	{
		GetPacmanPawn()->SetDirection(FVector::RightVector);
	}
}